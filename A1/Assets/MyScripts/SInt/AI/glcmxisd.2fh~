using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PatrolState : StateMachineBehaviour
{

    ISupportComp getOwnerUnitRefComp;
    bool hasGetOwnerUnitRefComp;
    UnitRefs _ur;
    //OnStateEnter is called when a transition starts and the state machine starts to evaluate this state
    override public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    {
        if (hasGetOwnerUnitRefComp == false)
        {
            hasGetOwnerUnitRefComp = animator.TryGetComponent<ISupportComp>(out getOwnerUnitRefComp);
            _ur = getOwnerUnitRefComp._OwnerUnitRefs;
        }

        targetTime = timerInSeconds;
    }
    public float timerInSeconds = 5f;
    public float targetTime;

    public float randomMoveRadius = 5f;
    public Vector2 randomSelectedPosInCircle;
    public Vector2 vectorInput = Vector2.one;
    // OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks
    override public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    {
        targetTime -= Time.deltaTime;

        _ur.unitCompAbilityManager.GetActiveAbilityCompByEnum(EAbilityTechniques.MoveHorizontal).Axis = randomSelectedPosInCircle.x;
        _ur.unitCompAbilityManager.GetActiveAbilityCompByEnum(EAbilityTechniques.MoveHorizontal).buttonDown = true;
        _ur.unitCompAbilityManager.GetActiveAbilityCompByEnum(EAbilityTechniques.MoveVertical).Axis = randomSelectedPosInCircle.y;
        _ur.unitCompAbilityManager.GetActiveAbilityCompByEnum(EAbilityTechniques.MoveVertical).buttonDown = true;
        if (targetTime <= 0)
        {
           vectorInput= randomSelectedPosInCircle = Random.insideUnitCircle * randomMoveRadius;
             = Vector2.Dot(animator.transform.position, randomSelectedPosInCircle+ animator.transform.position * Vector2.one);
            targetTime = timerInSeconds;
        }

    }

    // OnStateExit is called when a transition ends and the state machine finishes evaluating this state
    //override public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    //{
    //    
    //}

    // OnStateMove is called right after Animator.OnAnimatorMove()
    //override public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    //{
    //    // Implement code that processes and affects root motion
    //}

    // OnStateIK is called right after Animator.OnAnimatorIK()
    //override public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    //{
    //    // Implement code that sets up animation IK (inverse kinematics)
    //}
}
